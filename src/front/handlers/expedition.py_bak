# -*- coding: utf-8 -*-

import random
import time
import zlib
import uuid
import pickle
from twisted.internet import defer
from cyclone import escape, web
from front import storage
from front import utils
from front.utils import E
from front import D
from front.wiapi import *
from front.handlers.base import ApiHandler
from local_settings import ZONE_ID



@handler
class BaseHandler(ApiHandler):

    def get_initial_reset(self, user):
        return 1


    @storage.databaseSafe
    @defer.inlineCallbacks
    def calc_allcomps(self, user):
        zuid = '%s:%s' % (ZONE_ID, user['uid'])
        sworduser = yield self.predis.hget('all:users', zuid)
        sworduser = pickle.loads(sworduser)
        if sworduser:
            sword = sworduser['topsword']
        else:
            sword = DEFAULT_SWORD
        comps = []
        for i in range(15):
            low, high = EXPEDITIONCOMPS[i*2], EXPEDITIONCOMPS[i*2+1]
            lowsword, highsword = int(sword * low), int(sword * high)
            lowzuid = yield self.predis.zrangebyscore('all:users:sword', lowsword, highsword, offset=0, count=1)

            if len(lowzuid) > 0:
                print 'lowzuid', lowzuid
                lowindex = yield self.predis.zrank('all:users:sword', lowzuid[0])
                limit = yield self.predis.zcount('all:users:sword', lowsword, highsword)
                print 'limit', limit
                print 'lowindex', lowindex
                needswordindex = random.randint(lowindex, lowindex+limit)
                needzuid = (yield self.predis.zrange('all:users:sword', needswordindex, needswordindex))[0]
                zuiduser = pickle.loads((yield self.predis.hget('all:users', needzuid)))
                zuiduser['blood'] = {hid: 0 for hid in zuiduser['tophids']}
                comps.append(zuiduser)

        defer.returnValue(comps)


    @storage.databaseSafe
    @defer.inlineCallbacks
    def get_expedition(self, user):
        uid = user['uid']
        expedition = yield self.predis.hget("expeditions:%s" % ZONE_ID, uid)
        print 'expedition', expedition
        if expedition:
            expedition = pickle.loads(expedition)
        else:
            heros = user['heros']
            blood = {hid: 0 for hid in heros}
            comps = yield self.calc_allcomps(user)
            reset = self.get_initial_reset(user)
            expedition = dict(blood=blood, comps=comps, reset=reset)
            #yield self.predis.hset("expeditions:%s" % ZONE_ID, uid, expedition)
        defer.returnValue(expedition)


    @storage.databaseSafe
    @defer.inlineCallbacks
    def set_expedition(self, user, blood, comps, reset=0):
        pass



@handler
class InfoHandler(BaseHandler):

    @storage.databaseSafe
    @defer.inlineCallbacks
    @utils.signed
    @api('Expedition info', '/expedition/info/', [
        Param('_sign', True, str, '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '_sign'),
        ], description=u"获得远征信息,包含关卡信息,敌人信息,重置信息")
    def post(self):
        uid = self.uid
        user = yield self.get_user(uid)
        expedition = yield self.get_expedition(user)
        ret = dict(out=dict(user=dict(extra=user['extra']), expedition=expedition), timestamp=int(time.time()))
        self.write(ret)


@handler
class GetHandler(ApiHandler):

    @storage.databaseSafe
    @defer.inlineCallbacks
    @utils.signed
    @api('Expedition get', '/expedition/get/', [
        Param('eid', True, str, '070001', '070001', 'eid'),
        Param('hids', True, str, '01002,01001', '01002,01001', 'hids'),
        Param('_sign', True, str, '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '_sign'),
    ], description=u"获取当前关卡掉落信息")
    def post(self):
        try:
            eid = self.get_argument("eid")
            hids = self.get_argument("hids").split(',')    # "12,32,56,1,10"
        except Exception:
            raise web.HTTPError(400, "Argument error")

        uid = self.uid
        user = yield self.get_user(uid)
        try:
            match = E.match4entry(eid)
            heros = {hid: [user['heros'][hid] for hid in hids]}
        except Exception:
            self.write(dict(err=E.ERR_INVALID, msg=E.errmsg(E.ERR_INVALID)))
            return
        match = {
            'label': match.get('label', ''),
            'hids': hids,
            'hp': match.get('hp', 0),
            'gold': match.get('gold', 0),
            'rock': match.get('rock', 0),
            'feat': match.get('feat', 0),
            'xp': match.get('xp', 0),
            'hxp': match.get('hxp', 0),
            'prods': match.get('prods', {}),
        }
        fid = uuid.uuid4().hex
        yield self.set_flush(fid, match)
        ret = dict(out=dict(flush=fid, match=match), timestamp=int(time.time()))
        reb = zlib.compress(escape.json_encode(ret))
        self.write(ret)


@handler
class SetHandler(ApiHandler):

    @storage.databaseSafe
    @defer.inlineCallbacks
    @utils.signed
    @api('Expedition set', '/expedition/set/', [
        Param('fid', True, str, '0cb9abd2f380497198c769344279a7cd', '0cb9abd2f380497198c769344279a7cd', 'fid'),
        Param('blood', True, str, '', '{"blood": {"01002": 40, "01003": -1}, "result":0, "comp":{"01002": 40}', 'gain'),
        Param('_sign', True, str, '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '_sign'),
    ], description=u"设置远征战役结果,包括双方血量")
    def post(self):
        try:
            fid = self.get_argument("fid")
            gain = escape.json_decode(self.get_argument("gain"))
        except Exception:
            raise web.HTTPError(400, "Argument error")

        uid = self.uid
        user = yield self.get_user(uid)
        prop = yield self.get_flush(fid)
        if 'result' not in gain:
            self.write(dict(err=E.ERR_INVALID, msg=E.errmsg(E.ERR_INVALID)))
            return

        yield self.set_expedition(self, user, gain['blood'], gain['comps'])
        if gain['result']:
            user['gold'] += prop['gold']
            user['rock'] += prop['rock']
            user['feat'] += prop['feat']
            for hid in prop['hids']:
                hero = user['heros'][hid]
                hlvmit, hero['xp'] = E.normhxp(user, hero['xp'], prop['hxp'])
            for prod, n in prop['prods'].items():
                if prod in user['prods']:
                    user['prods'][prod] += n
                else:
                    user['prods'][prod] = n
                if user['prods'][prod] > 999:
                    user['prods'][prod] = 999
                elif user['prods'][prod] == 0:
                    del user['prods'][prod]
                else:pass
            label = prop['label']
            cuser = dict(gold=user['gold'], rock=user['rock'], feat=user['feat'], heros=user['heros'],
                         prods=user['prods'])
        else:
            cuser = {}

        cwork = E.tagworks(user, {'EXPEDITION': 1})
        if cwork:
            cuser['works'] = user['works']
        ctask = E.pushtasks(user)
        if ctask:
            cuser['tasks'] = user['tasks']
        cmail = E.checkmails(user)
        if cmail:
            cuser['mails'] = user['mails']
        yield self.set_user(uid, **cuser)
        ret = dict(out=dict(user=cuser), timestamp=int(time.time()))
        reb = zlib.compress(escape.json_encode(ret))
        self.write(ret)



@handler
class ResetHandler(ApiHandler):

    @storage.databaseSafe
    @defer.inlineCallbacks
    @utils.signed
    @api('Expedition reset', '/expedition/reset/', [
        Param('_sign', True, str, '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '_sign'),
    ], description=u"重置远征,重置次数减1")
    def post(self):
        pass





@handler
class SetHandler(ApiHandler):

    @storage.databaseSafe
    @defer.inlineCallbacks
    @utils.signed
    @api('Inst set', '/inst/set/', [
        Param('channel', False, str, 'putaogame', 'putaogame', 'channel'),
        Param('fid', True, str, '020201', '020201', 'iid'),
        Param('gain', True, str, '3', '3', 'gain'),
        Param('_sign', True, str, '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '4GRwMApTJ3VpZCcKcDEKUycxMScKcDIKcyK', '_sign'),
        ], filters=[ps_filter], description="Inst set")
    def post(self):

        uu = self.get_argument("uu", None)
        if uu:
            uu = "%s:%s:%s" % (self.request.remote_ip, self.request.path, uu)
            ret = yield self.get_uu(uu)
            if ret:
                self.write(ret)
                return

        try:
            fid = self.get_argument("fid")
            gain = int(self.get_argument("gain"))
        except Exception:
            raise web.HTTPError(400, "Argument error")

        uid = self.uid
        user = yield self.get_user(uid)
        prop = yield self.get_flush(fid)
        if not prop:
            self.write(dict(err=E.ERR_INVALID, msg=E.errmsg(E.ERR_INVALID)))
            return

        hp, tick = yield self.add_hp(user, -1 * prop['hp'] * 5/6)
        user['gold'] += prop['gold']
        user['rock'] += prop['rock']
        user['feat'] += prop['feat']
        try:
            user['xp'], ahp = E.normxp(user, user['xp'] + prop['xp'])
        except E.MAXLEVELREADYGOT:
            ahp = 0
        if ahp:
            hp, tick = yield self.add_hp(user, ahp)
        for hid in prop['hids']:
            hero = user['heros'][hid]
            hlvlimit, hero['xp'] = E.normhxp(user, hero['xp'], prop['hxp'])
        for prod, n in prop['prods'].items():
            if prod in user['prods']:
                user['prods'][prod] += n
            else:
                user['prods'][prod] = n
            if user['prods'][prod] > 999:
                user['prods'][prod] = 999
            elif user['prods'][prod] == 0:
                del user['prods'][prod]
        label = prop['label']
        eid = prop['eid']
        if eid not in user['insts']:
            user['insts'][eid] = {'gain': gain}
        else:
            if int(gain) > int(user['insts'][eid]['gain']):
                user['insts'][eid]['gain'] = gain

        cuser = dict(gold=user['gold'], rock=user['rock'], feat=user['feat'], xp=user['xp'], heros=user['heros'],
                     prods=user['prods'], insts=user['insts'])
        nuser = dict(hp=hp, tick=tick, gold=user['gold'], rock=user['rock'], feat=user['feat'], xp=user['xp'],
                     heros=user['heros'], prods=user['prods'], insts=user['insts'])
        if label.startswith('0201'):
            cwork = E.tagworks(user, {'INST1': 1})
        elif label.startswith('0202'):
            cwork = E.tagworks(user, {'INST2': 1})
        else:
            cwork = E.tagworks(user, {'INST3': 1})
        if cwork:
            cuser['works'] = user['works']
            nuser['works'] = user['works']
        ctask = E.pushtasks(user)
        if ctask:
            cuser['tasks'] = user['tasks']
            nuser['tasks'] = user['tasks']
        cmail = E.checkmails(user)
        if cmail:
            cuser['mails'] = user['mails']
            nuser['mails'] = user['mails']
        yield self.set_user(uid, **cuser)
        yield self.redis.hincrby("entrycount:%s" % uid, label, 1)
        yield self.redis.hset("entrytimer:%s" % uid, label, int(time.time()))
        nentrycounts = {label: (yield self.redis.hget("entrycount:%s" % uid, label))}
        nentrytimers = {label: (yield self.redis.hget("entrytimer:%s" % uid, label))}
        ret = dict(out=dict(user=nuser, entrycounts=nentrycounts, entrytimers=nentrytimers), timestamp=int(time.time()))
        reb = zlib.compress(escape.json_encode(ret))
        self.write(ret)

        if uu:
            yield self.set_uu(uu, ret)




DEFAULT_SWORD = 1000

EXPEDITIONCOMPS = [
    0.3, 0.4,
    0.3, 0.4,
    0.4, 0.5,
    0.4, 0.5,
    0.5, 0.6,
    0.6, 0.7,
    0.6, 0.7,
    0.7, 0.8,
    0.7, 0.8,
    0.8, 0.9,
    0.8, 0.9,
    0.9, 1.0,
    0.9, 1.0,
    1.0, 1.1,
    1.1, 1.2
]
